name: Microservice CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the service
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Build application
      run: npm run build
      
    - name: Run security audit
      run: npm audit --audit-level moderate

  # Build and push Docker image
  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Azure (Development)
  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Deploy to Azure Container Apps
      run: |
        # Get the latest image tag
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:{{branch}}-${{ github.sha }}"
        
        # Update container app with new image
        az containerapp update \
          --name ${{ env.SERVICE_NAME }}-dev \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --image $IMAGE_TAG \
          --set-env-vars NODE_ENV=development
        
        echo "Deployed $IMAGE_TAG to development environment"

  # Deploy to Azure (Production)
  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Deploy to Azure Container Apps
      run: |
        # Get the latest image tag
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Update container app with new image
        az containerapp update \
          --name ${{ env.SERVICE_NAME }}-prod \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --image $IMAGE_TAG \
          --set-env-vars NODE_ENV=production
        
        echo "Deployed $IMAGE_TAG to production environment"
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Service: ${{ env.SERVICE_NAME }}
          Environment: Production
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
